Asynchronous Javascript

lunes, 23 de octubre de 2017
17:56

The goal of this guide is to visually explain asynchronous programming in Javascript, so you can grasp key concepts in a glimpse. Let's quickly review some of these concepts prior to enter into detail.


This will represent a statement, function call, line of code, instruction or whatever concept you prefer for a task to be executed. 



SYNCHRONOUS vs ASYNCHRONOUS

	- Synchronous: Code executed in sequence, one statement after the other.
	- Asynchronous: Statements can go outside of the main flow, allowing the program to progress with the next task.  

BLOCKING vs NON-BLOCKING

	- Blocking: Each statement must wait for the previous one to complete. Execution flow may be blocked by time-consuming tasks.
	- Non-Blocking:  

Differences between NON-BLOCKING vs ASYNCHRONOUS

While synchronous and blocking refers to the same thing, asynchronous and non-blocking may slightly differ depending on the context. Certainly, they are pretty similar concepts aimed towards a more efficient execution flow. However, they fall back in different mechanisms to get the job done. 

	- Non-Blocking: A non-blocking call returns immediately with whatever result it has; data, no-data, error or even a message saying 'hey, this call will block, postpone it'.  It is implied that some sort of polling must be done to get the rest of the data or just to place a new request in a better moment.
	- Asynchronous: An asynchronous call will also return immediately, but the task will keep progressing in the background and will signal its completion using a specific asynchronous mechanism as a registered callback, promise or event.

CONCURRENCY vs PARALLELISM